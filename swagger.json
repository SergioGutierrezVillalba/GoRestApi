{
  "swagger": "2.0",
  "info": {},
  "paths": {
    "/user": {
      "get": {
        "description": "Requires Auth (JWT)",
        "tags": [
          "users"
        ],
        "summary": "Returns user by JWT sent.",
        "operationId": "getUserByJwt",
        "responses": {
          "200": {
            "description": "getUserResp",
            "schema": {
              "$ref": "#/definitions/getUserResp"
            }
          },
          "400": {
            "description": "queryErrResp",
            "schema": {
              "$ref": "#/definitions/queryErrResp"
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "description": "Requires Auth (JWT)",
        "tags": [
          "users"
        ],
        "summary": "Returns all users from Database.",
        "operationId": "getAllUsers",
        "responses": {
          "200": {
            "description": "getAllUsersResp",
            "schema": {
              "$ref": "#/definitions/getAllUsersResp"
            }
          },
          "400": {
            "description": "queryErrResp",
            "schema": {
              "$ref": "#/definitions/queryErrResp"
            }
          }
        }
      },
      "put": {
        "description": "Updates a user with JSON given and returns updated JWT.",
        "tags": [
          "users"
        ],
        "summary": "Updates a user.",
        "operationId": "updateUser",
        "responses": {
          "200": {
            "description": "updateUserResp",
            "schema": {
              "$ref": "#/definitions/updateUserResp"
            }
          },
          "400": {
            "description": "queryErrResp",
            "schema": {
              "$ref": "#/definitions/queryErrResp"
            }
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Creates a user.",
        "operationId": "createUser",
        "responses": {
          "200": {
            "description": "genericSuccessResp",
            "schema": {
              "$ref": "#/definitions/genericSuccessResp"
            }
          },
          "400": {
            "description": "queryErrResp",
            "schema": {
              "$ref": "#/definitions/queryErrResp"
            }
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "description": "Checks data sent for login and returns jwt if successful",
        "tags": [
          "validation"
        ],
        "summary": "Login.",
        "operationId": "login",
        "responses": {
          "200": {
            "description": "loginResp",
            "schema": {
              "$ref": "#/definitions/loginResp"
            }
          },
          "400": {
            "description": "queryErrResp",
            "schema": {
              "$ref": "#/definitions/queryErrResp"
            }
          }
        }
      }
    },
    "/users/nopwd": {
      "put": {
        "description": "Updates a user with JSON given without changing password",
        "tags": [
          "users"
        ],
        "summary": "Updates a user without updating password.",
        "operationId": "updateUserWithoutPwd",
        "responses": {
          "200": {
            "description": "updateUserResp",
            "schema": {
              "$ref": "#/definitions/updateUserResp"
            }
          },
          "400": {
            "description": "queryErrResp",
            "schema": {
              "$ref": "#/definitions/queryErrResp"
            }
          }
        }
      }
    },
    "/users/register": {
      "post": {
        "description": "Allows register for new users",
        "tags": [
          "validation"
        ],
        "summary": "Register.",
        "operationId": "register",
        "responses": {
          "200": {
            "description": "genericSuccessResp",
            "schema": {
              "$ref": "#/definitions/genericSuccessResp"
            }
          },
          "400": {
            "description": "queryErrResp",
            "schema": {
              "$ref": "#/definitions/queryErrResp"
            }
          }
        }
      }
    },
    "/users/reset": {
      "patch": {
        "description": "Change password with recover token given.",
        "tags": [
          "validation"
        ],
        "summary": "Change password.",
        "operationId": "resetPassword",
        "responses": {
          "200": {
            "description": "genericSuccessResp",
            "schema": {
              "$ref": "#/definitions/genericSuccessResp"
            }
          },
          "400": {
            "description": "queryErrResp",
            "schema": {
              "$ref": "#/definitions/queryErrResp"
            }
          }
        }
      }
    },
    "/users/sendrecover": {
      "post": {
        "description": "Sends an mail to user's email related to with an url to recover password",
        "tags": [
          "validation"
        ],
        "summary": "Allows way to recover password when user has forgotten it.",
        "operationId": "sendRecover",
        "responses": {
          "200": {
            "description": "genericSuccessResp",
            "schema": {
              "$ref": "#/definitions/genericSuccessResp"
            }
          },
          "400": {
            "description": "queryErrResp",
            "schema": {
              "$ref": "#/definitions/queryErrResp"
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "description": "if user id is not send correctly 400 code is returned",
        "tags": [
          "users"
        ],
        "summary": "Returns an user by Id sent",
        "operationId": "getUserById",
        "parameters": [
          {
            "type": "string",
            "description": "id of a user",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {}
      },
      "delete": {
        "description": "Deletes a user with given Id via url",
        "tags": [
          "users"
        ],
        "summary": "Delete a user with given Id.",
        "operationId": "deleteUser",
        "responses": {
          "200": {
            "description": "genericSuccessResp",
            "schema": {
              "$ref": "#/definitions/genericSuccessResp"
            }
          },
          "400": {
            "description": "queryErrResp",
            "schema": {
              "$ref": "#/definitions/queryErrResp"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ObjectId": {
      "description": "http://www.mongodb.org/display/DOCS/Object+IDs",
      "type": "string",
      "title": "ObjectId is a unique ID identifying a BSON value. It must be exactly 12 bytes\nlong. MongoDB objects by default have such a property set in their \"_id\"\nproperty.",
      "x-go-package": "gopkg.in/mgo.v2/bson"
    },
    "User": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "groupId": {
          "type": "string",
          "x-go-name": "GroupId"
        },
        "id": {
          "$ref": "#/definitions/ObjectId"
        },
        "jwt": {
          "type": "string",
          "x-go-name": "Jwt"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "profileImage": {
          "type": "string",
          "x-go-name": "ProfileImage"
        },
        "raw": {
          "type": "string",
          "x-go-name": "RawId"
        },
        "role": {
          "type": "string",
          "x-go-name": "Role"
        },
        "routeimg": {
          "type": "string",
          "x-go-name": "RouteImg"
        },
        "token": {
          "type": "string",
          "x-go-name": "Token"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "FirstProject/Model"
    },
    "genericSuccessResp": {
      "description": "HTTP status code 200 message response",
      "type": "object",
      "properties": {
        "response": {
          "description": "in:body",
          "type": "string",
          "x-go-name": "Response"
        }
      },
      "x-go-name": "GenericSuccessResp",
      "x-go-package": "FirstProject/Swagger"
    },
    "getAllUsersResp": {
      "description": "Users requested",
      "type": "object",
      "properties": {
        "users": {
          "description": "in:body",
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          },
          "x-go-name": "Users"
        }
      },
      "x-go-name": "GetAllUsersResp",
      "x-go-package": "FirstProject/Swagger"
    },
    "getUserResp": {
      "description": "User requested",
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/User"
        }
      },
      "x-go-name": "GetUserResp",
      "x-go-package": "FirstProject/Swagger"
    },
    "internalErr": {
      "description": "HTTP status code 500 response",
      "type": "object",
      "properties": {
        "error": {
          "description": "in:body",
          "type": "string",
          "x-go-name": "Error"
        }
      },
      "x-go-name": "GenericInternalErr",
      "x-go-package": "FirstProject/Swagger"
    },
    "loginResp": {
      "description": "User's JWT",
      "type": "object",
      "properties": {
        "jwt": {
          "description": "in:body",
          "type": "string",
          "x-go-name": "Jwt"
        }
      },
      "x-go-name": "LoginResp",
      "x-go-package": "FirstProject/Swagger"
    },
    "notFound": {
      "description": "HTTP status code 404 response",
      "type": "object",
      "properties": {
        "error": {
          "description": "in:body",
          "type": "string",
          "x-go-name": "Error"
        }
      },
      "x-go-name": "GenericNotFound",
      "x-go-package": "FirstProject/Swagger"
    },
    "queryErrResp": {
      "description": "HTTP status code 400 response message",
      "type": "object",
      "properties": {
        "error": {
          "description": "in:body",
          "type": "string",
          "x-go-name": "Error"
        }
      },
      "x-go-name": "GenericQueryErrResp",
      "x-go-package": "FirstProject/Swagger"
    },
    "updateUserResp": {
      "description": "User's JWT updated",
      "type": "object",
      "properties": {
        "jwt": {
          "description": "in:body",
          "type": "string",
          "x-go-name": "Jwt"
        }
      },
      "x-go-name": "UpdateUserResp",
      "x-go-package": "FirstProject/Swagger"
    }
  }
}